How experienced would you consider yourself to be in applying refactorings?,Which IDEs do you use for refactoring or have knowledge of their refactoring tools?,"On a scale of 1 to 5 (where 5 indicates a lot of experience and 1 indicates little or no experience), how experienced would you consider yourself to be about applying the refactorings below? [Extract Method]","On a scale of 1 to 5 (where 5 indicates a lot of experience and 1 indicates little or no experience), how experienced would you consider yourself to be about applying the refactorings below? [Inline Method]","On a scale of 1 to 5 (where 5 indicates a lot of experience and 1 indicates little or no experience), how experienced would you consider yourself to be about applying the refactorings below? [Move Method]","On a scale of 1 to 5 (where 5 indicates a lot of experience and 1 indicates little or no experience), how experienced would you consider yourself to be about applying the refactorings below? [Pull Up Method]","1-In the example below, a developer chose to swap the call to methodA () contained in methodB () with a call to the extractedFromA () method after applying the Extract Method refactoring. Is the developer having tool support in their decision to add, remove or swap calls (in client methods) in the methods affected by the refactoring relevant to you?","If you wish, please explain your answer to question 1.","2-In the example below, a developer chose to keep the exception handling of methodA () (required for functionality 2) after the Extract Method refactoring, though they could have chosen to extract the handler as well. Is the developer having tool support in their decision on where the handling of this exception should occur relevant to you?","If you wish, please explain your answer to question 2.","3-In the example below, a developer chose to incorporate methodB (x) into the return of methodA () after the Inline Method refactoring, though they could have chosen to save the embedded statements in a variable and then return the variable. Is the developer having tool support in their decision on which embedded methods should be part of the return statement of the method that incorporated it and in Client methods relevant to you?","If you wish, please explain your answer to question 3.","4-In the example below, a developer chose to incorporate methodB (y) into an arithmetic expression in methodA () after the Inline Method refactoring, although they could have chosen to save the embedded statements in a variable and then add the variable to the expression. Is the developer having tool support in their decision on whether the embedded method should remain in the expression or be treated beforehand relevant to you?","If you wish, please explain your answer to question 4.","5-In the example below, a developer chose to assign the extracted method (methodExtracted ()) to a variable, although they could only call methodExtracted () during the logic of methodA (). Is the developer having tool support in their decision on whether the extracted method should be assigned to a variable relevant to you?","If you wish, please explain your answer to question 5.","6-In the example below, a developer chose to move the methodA () body to a super class to an existing method during a Pull Up Method. Is the developer having tool support in their decision on whether the whole method, including its declaration, should be moved or just the body of the method relevant to you?","If you wish, explain your answer to question 6.","Would you like to add any other comments about the previous questions? If so, please indicate the question and the observations related to it.","Do you believe that your favored IDE supports the decisions of the previous questions through its refactoring tool? If not, what limitations do you believe your favored IDE has?"
"A little experienced, I rarely apply them.",Eclipse,3,3,3,3,Yes,,No,,Yes,,No,,No,,Yes,,,No. The developer has no support in decision making.
"Very experienced, I apply them frequently.",Eclipse,5,5,5,5,Yes,Less error-proneness.,Yes,Alerting about the two options helps the developer choose,Yes,Ditto,Yes,Ditto,Yes,Ditto,Yes,Accelerates well-thought-out decisions about refactoring.,IDEs / tools should automate more refactoring alternatives,No. All the situations answered above.
"Very experienced, I apply them frequently.","NetBeans, Eclipse, IntelliJ, VS Code",5,5,3,4,Yes,"It is relevant, as part of the extracted code can have its utility affected.",No,"Point out where the treatment should be helps the developer understand how to code better, as well as how to make the code more coherent.",Yes,"Yes, it is relevant. It is not always clear if a method should be incorporated or to stay isolated. Some recommendations can help to create a habit in the development process.",No,Keeping the responsibility isolated should include the treatment.,Yes,,Yes,"Yes, it is relevant. The developer should be assisted, as the merging of codes can directly affect other parts of the program.",,"I use Eclipse a lot, and although I get a lot of warnings about the risk of certain refactorings, it's not clear what rules are used to determine these preconditions. This should differ for each IDE."
"Experienced, I apply them occasionally.","Eclipse, IntelliJ",5,4,4,4,Yes,,Yes,"It is important for the developer to know the drawbacks of each option. In this case, it is necessary to treat the exception in each layer.",No,,No,In my opinion this decision is much more related to style.,No,,Yes,The swap can affect other customers.,,"I confess that I'm not sure about the type of support and ""tips"" that IDE provides. I only use the features"
"Experienced, I apply them occasionally.","Eclipse, VisualStudio",5,5,5,4,No,I consider the change (rename) simple.,Yes,"The exception treatment could contain complex catch blocks. Generally, the decision of where the exception should be treated is error-prone.",No,Because it is an inline method which is a very self-contained refactoring.,Yes,A tool to alert of the possible creation of a complex expression (code smell) would be relevant.,No,"I do not find it difficult to assess the need to save the return., taking into account tools available in current IDEs.",No,I believe it is an observation of behavior change or not. Covered by tests.,"Sometimes, the nature of the possible tool could be indicated. For example, in example 6 is it just about behavior verification? In example 2 is it about exception handling?","The IDEs provide support for the execution of the classic refactorings presented. However, the variants shown are not completely covered. In addition, it contains some limitations in presenting more information about the modified behavior or the treatment of failures and possible associated limitations."
"Experienced, I apply them occasionally.","Eclipse, IntelliJ",5,1,4,3,Yes,"I think that without the context of the application it is hard to evaluate if it was the right decision, as now functionality 1 is no longer executed. Maybe with help from a tool, the developer would notice it, since the lost method would be called from its previous location. Ps: in the right side of the refactoring, the 1 in ""Functionality 1"" is missing.",No,,Yes,"MethodB does not return the treatment, so methodA beforehand would also not return anything, as a consequence. Now, on the right side, methodA is now returning the treatment of X.",No,"To be honest, the code snippets are a bit confusing. In the example above we have a return in the snippet and afterwards we do not, and my answer was according to it. Now this snippet does not have the return of the method, but I believe it should have?! I understand it should be as succint as possible, but it caused me confusion.",Yes,"In the code on the left, is int c = x treatment?",Yes,,Please read the answer to question 4,"Yes, but the ides have problems and apply refactoring in the wrong way."
"Experienced, I apply them occasionally.","Eclipse, IntelliJ",5,1,4,3,Yes,"I think that without the context of the application it is hard to evaluate if it was the right decision, as now functionality 1 is no longer executed. Maybe with help from a tool, the developer would notice it, since the lost method would be called from its previous location. Ps: in the right side of the refactoring, the 1 in ""Functionality 1"" is missing.",No,,Yes,"MethodB does not return the treatment, so methodA beforehand would also not return anything, as a consequence. Now, on the right side, methodA is now returning the treatment of X.",No,"To be honest, the code snippets are a bit confusing. In the example above we have a return in the snippet and afterwards we do not, and my answer was according to it. Now this snippet does not have the return of the method, but I believe it should have?! I understand it should be as succint as possible, but it caused me confusion.",Yes,"In the code on the left, is int c = x treatment?",Yes,,Please read the answer to question 4,"Yes, but the ides have problems and apply refactoring in the wrong way."
"Very experienced, I apply them frequently.",IntelliJ,5,5,4,5,Yes,Yes. To decide if this is a good refactoring or not (what impact does it have?) and if it was done with no problems (if everything still works afterwards),Yes,What are the advantages and disadvantages of taking the try/catch with it?,No,"Supposing that the treatment of X was something simple, I do not believe that tool support would help very much. Maybe deciding which is the team's pattern, an a linter to maintain it?",No,Similar answer to the above. Follow the pattern of the team.,Yes,"What is the benefit of taking the ""X treatment"" to another method? Will method A get much better?",Yes,Perhaps this is the most difficult and important. Tools that say that if I take the code up I won't break any other implementation of the parent class is important.,,"The decisions are not. But she does these refactorings for me, without me having to worry about making the code compile (after all, she rarely breaks the code, in terms of compilation)."
"A little experienced, I rarely apply them.",VSCode,3,1,3,2,Yes,,Yes,,Yes,,No,,Yes,,Yes,,,"As I don't usually do refactorings, I'm not sure about the limitations of my IDE, however, with the help of plugins, I have some tools that help refactor with common community practices."
"Experienced, I apply them occasionally.","NetBeans, Eclipse",4,3,5,5,Yes,,Yes,,Yes,,Yes,,Yes,,Yes,,,"I have not tested these scenarios but I believe it is not supportive. For example, in question 1, when applying the Extract Method, Eclipse does not provide the option to modify a method affected by refactoring. This would have to be done manually. Making these changes manually is risky, as as shown in the examples on this form, changes can change the behavior of the program, and this is not always the intention of the developer."
"Experienced, I apply them occasionally.",Eclipse,4,2,4,2,Yes,"yes, because it reduces the coding time.",No,,No,,Yes,,Yes,,Yes,,,"No, some plugins that suggest refactorings are confusing and have bugs and therefore end up not providing the necessary confidence for these tasks."
"Experienced, I apply them occasionally.",IntelliJ,4,2,4,3,No,"Tools are not necessary, it is possible to manually do this without problems",No,,No,,No,,No,,No,,,"Yes, although in most cases I do the refactoring manually"
"Experienced, I apply them occasionally.","NetBeans, Eclipse",5,3,5,5,Yes,"It would be possible to do by hand, by extracting the method and then replacing the call. But an aid that lists all calls to the original method and allows the developer to choose which would be sent to the extracted method would be useful to avoid incomplete modifications.",Yes,"Again, it is something that can be done by hand, but being able to choose this option in the moment of extraction makes it easier and reduces the chance of an error.",No,"I think it is less relevant for this case, as the difference between the two options is minimal. However, even though I believe it is less relevant, it would do no harm to have this option.",No,"Again, I think it is less relevant if compared to items 1 and 2. However, it could be wanted in some scenario.",No,"I keep finding this scenario less relevant. But I think that depending on the coding standards adopted, it may be desired or not to add declaration with attribution.",Yes,"There are situations where the objective is to complement the behavior of a existing method in the superclass. In such cases, indicating which method it is and automatically merging it can be useful.","In general, I was wondering if these situations should be seen as parameterizations of existing refactorings or a combination of refactorings. For example, situation 6 appears to be a combination of two refactorings: first, the method moves up to the superclass, and then, the method is combined with another existing method.","The IDEs I use most today (Netbeans and PyCharm) are frequently changing refactoring support. Last time I used it, there was no way to parameterize the refactoring as questioned here. I think the idea is interesting, but as I said before, maybe the possibility of creating refactoring scripts, combining some refactorings in sequence, would be positive. These refactoring scripts could be saved as a new composite refactoring. Eventually, there could be a public refactoring base, where people download the most suitable composite refactorings to their IDE."
"A little experienced, I rarely apply them.",NetBeans,2,2,2,2,Yes,,No,,No,,No,,No,,Yes,,"I indicated no in most cases because I don't think there is a right or wrong with refactorings. So I found the term ""MUST"" used in the questions a little strong.",No. For the reason explained in the previous question.
"Experienced, I apply them occasionally.","Eclipse, IntelliJ",4,4,3,4,Yes,"On the example, there's a clear change in behaviour, since functionality 1 is no longer being executed. The reasoning for doing this here is not clear.",Yes,Smell here: all users of extractedFromA will have to treat the exception. Not necessarily a problem.,No,i could not find a potential problem here.,Yes,Potential return problem here?,Yes,Perhaps throwing an exception might change methodExtracted behavior,Yes,"Refactoring involving super and subtypes is always ""tricky"". The tool could help to verify potential changes in behavior.","Perhaps many will answer ""YES"" to all questions, out of the simple insecurity of applying structural changes. Perhaps also because of the context, it does not specify whether unit tests are available.","They do not indicate potential changes in behavior. The support is simply syntactic (in simple refactorings, it is enough)."
"A little experienced, I rarely apply them.",Eclipse,1,1,3,1,Yes,Understanding how the change affects the code does not look like a simple task. A tool could help in understanding how this occurs better,Yes,It depends a bit from experience. I would like this help to understand better whta is affected and where to take the decision beforehand,Yes,"Some cases are very intuitive, but in more complex cases, the tool would help me see if the change is worth it",No,It looks like a clear case in which the change would not compensate,No,,Yes,This change appears to have a lot of side effects. A tool could help me understand the effects,,No. Some of these examples are very specific
"Experienced, I apply them occasionally.",Eclipse,5,3,5,4,Yes,"It is relevant, as even though this task is simple in general, new developers can avoid mistakes or doubts while doing the extraction, as well as standardizing the procedure for team development.",Yes,"Yes. This case is no longer as simple as the previous, for starting developers it can help avoid problems and errors.",Yes,"Yes. Same explanation as the previous one. This case is already not as simple as the first one, for starting developers it can help avoid problems and errors.",Yes,"Yes. Same explanation as the previous one. This case is already not as simple as the first one, for starting developers it can help avoid problems and errors.",Yes,"Yes. Same explanation as the previous one. This case is already not as simple as the first one, for starting developers it can help avoid problems and errors.",Yes,"Yes. Same explanation as the previous one. This case is already not as simple as the first one, for starting developers it can help avoid problems and errors.","Yes, I would like to add some comments. The refactoring subject is very relevant and recognized as such, however, it needs more attention from the research point of view. Furthermore, because of the problems related to the methodologies and schedule of the projects, it ends up being a task relegated to the background, with less priority given the actual delivery of the functionalities, which ends up being a short-term view, since refactoring is a activity that functions as an investment for the future health of the software.","In my case, IDE responds well to the refactorings that I need, despite the lack of flexibility in tasks when necessary."
"A little experienced, I rarely apply them.",Eclipse,3,2,4,1,Yes,,Yes,,Yes,,Yes,,Yes,,Yes,,"Although tooling support for such refactoring practices is of great help (1-6), it is necessary that it be user-friendly, configurable and not ""invasive"" in a developer's daily life.","Yes, she has some suggestions for extract and move method, but that helps a lot."
"A little experienced, I rarely apply them.",NetBeans,1,1,1,1,Yes,,Yes,,Yes,,No,"In this situation, the decision of the programmer based on their experience, turns them able to to manually choose about the decision of the source code's logic and refactoring.",No,"The justification for such a situation would only be it if the code has very critical treatments. That is, it would not be the case for ""X Treatment"". Although, not wanting to be contradictory in my decision, both situations would be adequate, but primarily the first would be the best choice",Yes,,"I believe that the form was very well prepared, but what made my analysis difficult was really to remember certain concepts, even with the source code shown on the side. Also, for the better understanding of ""external tooling support or of the IDE itself"", it should be bold, if possible, because, at the beginning of the research, I was in doubt about what it was. In any case, I would like to congratulate the creators of the research, because we know that the preparation and elaboration of the entire research requires a lot of support from everyone involved in order to achieve the objective of the study in question for a given solution.","I used little the resource in NetBeans about code refactoring, due to the majority of applications that I had the opportunity to develop. I used to use 2 classes normally, so it would be necessary to use several classes and objectives for different situations. In other words, and I would need to use the Guidance Concepts in their entirety in source codes, which had several types of couplings, so that, I could perform the refactoring, to understand in practice the limitations in the case of my favorite IDE."
"Experienced, I apply them occasionally.","Eclipse, VS Code",4,3,4,1,Yes,,Yes,,Yes,,No,,Yes,,Yes,,,Yes.
"Experienced, I apply them occasionally.",Eclipse,4,4,4,2,Yes,"In this presented case, I believe that the support would be important as methodA performed two distinct functionalities and methodB would only be interested in Functionality 2. However, as the example is abstract, it is not possible to know if there would be any change in methodB's behavior, since it no longer interacts with Functionality 1.",Yes,In this case it would be extremely relevant for the IDE to suggest the customization of the refactoring.,No,"Here to me it looks more like a question of programming style. Hoever, the use of an intermediary variable could help improve the code's legibility.",Yes,"If methodB's code is small, the customization could not be very relevant. But in cases that would harm the legibility of the arithmetic expression, I believe it would be important.",Yes,,Yes,,,"No. IDE only provides the mechanisms for executing refactorings. However, no type of ""smart"" suggestion is provided to improve refactorings. IDE helps only in cases where refactoring would result in compilation problems."
"Experienced, I apply them occasionally.","Eclipse, IntelliJ",4,2,4,3,Yes,,Yes,,No,,No,,Yes,,No,,,"Partially. Some code snippets must be ""prepared"" to receive refactorings in a slightly more elaborate context."
"Experienced, I apply them occasionally.","Eclipse, IntelliJ",5,5,5,5,Yes,"The example does not seem to correspond to an extract method, since functionality 2 is no longer present inside methodA (according to the image). In any case, tool support is important to understand the impact of the change.",Yes,,Yes,"does methodB no longer exist after the change? If so, it is important to check if this has no impact.",Yes,,Yes,It is not clear how x will be passed to the extracted method.,Yes,does methodA ceased to exist? This does not seem to be a case of a pull up method to me .,Tooling support always seems necessary to me to understand the impact of the applied changes. It would be important to clarify what is meant by tooling support so that you can consider a different than positive response.,Yes
"Very experienced, I apply them frequently.",Eclipse,5,5,5,5,Yes,This really is very relevant. It can avoid many errors introduced by a refactoring that in itself is beneficial.,Yes,It promotes code reuse.,Yes,"The criteria used for this change should also be informed, as it is not a change that is always beneficial.",Yes,"The criteria used for this change should also be informed, as it is not a change that is always beneficial.",Yes,"I found the description confusing ... This case seems mandatory to maintain the logic, it is not possible to stop x from receiving treatment (given the way the example was shown). Another question: shouldn't x be a parameter of methodExtracted (), since it is local to methodA ()? I think so!",Yes,It brings great benefits in the architectural restructuring and in the improvement of the cohesion and coupling metrics.,"I found the questions to be very self-affirming. All help is very welcome, so it is always relevant to have some support in this. What should be assessed is how much support is needed, and to what developer profile. I missed questions like * at what time * this suggestion should be given, * in what format *, and * for which profile *. I am also concerned with the level of intrusiveness of the solution.","If the (gives = provides) support? Not to the decision. IDE assists more in resolving post-decision refactoring than in decision (and yet, support is limited)."
"A little experienced, I rarely apply them.",IntelliJ,3,3,3,3,Yes,I imagine that the support from the tool in this case would help in identifying the implications of the change and understanding the available possibilities for the client method.,Yes,"Similarly to the case of the previous question, it would be interesting for the user to have tool support to decide if the exception in question should be exposed to the client methods or not, giving them the option to decide who should treat it.",No,"In this case, it looks like tool support is less necessary to me, as I believe that if some adjustment is needed, it would be local and simple and, possibly, less frequent.",Yes,"In comparison with the previous one, the aid from a tool seems to be more necessary to avoid, for example, the expression becoming too complex and difficult to understand.",No,,Yes,The tool can support the programmer's decision on these options to try to get a final code that is clearer about its purpose.,No,"To answer this question properly, you would have to specifically test the situations proposed in the questions. Therefore, at that moment there would be no way to answer without doing (in) justice with the chosen IDE."
"Experienced, I apply them occasionally.",Eclipse,3,3,3,3,Yes,,Yes,,Yes,,Yes,,Yes,,Yes,,,No.
"A little experienced, I rarely apply them.","Eclipse, Vscode",1,1,1,1,Yes,,Yes,,No,,Yes,,Yes,,No,,,Yes.
"Experienced, I apply them occasionally.","Eclipse, IntelliJ",4,3,4,3,Yes,The maximum possible available functionalities for automating the process is always welcome.,Yes,"The code is from the developer, so he should have total control of where X or Y is, even in an automated process. However, if a decision would generate a possible code smell, this should be warned.",Yes,"The code is from the developer, so he should have total control of where X or Y is, even in an automated process. However, if a decision would generate a possible code smell, this should be warned.",Yes,"The code is from the developer, so he should have total control of where X or Y is, even in an automated process. However, if a decision would generate a possible code smell, this should be warned.",Yes,"The code is from the developer, so he should have total control of where X or Y is, even in an automated process. However, if a decision would generate a possible code smell, this should be warned.",Yes,"The code is from the developer, so he should have total control of where X or Y is, even in an automated process. However, if a decision would generate a possible code smell, this should be warned.","The answers were the same because I believe that the more customizable a refactoring is, the better for the developer, since he can have total control of what is being generated and avoid possible problems in refactoring. But it is also good to have a standard refactoring, in case the developer does not want to customize, to be able to apply promptly.",Not enough. Refactorings are not very customizable and there is also only a small set of refactorings.
"A little experienced, I rarely apply them.",Eclipse,4,1,4,1,Yes,"In the case in question, there can or not exist the need to change the call in methodB(). In other words, even with the extraction, there's a good possibility of methodB() continuing to call methodA(). However, even so, a tool support that allows the developer to decide whether or not to change the call and, in a positive case, perform the change automatically, could be useful to avoid forgetting to change somewhere.",Yes,"I'm not sure, but I believe that yes, since I am failing to comprehend how this help could be or how hard it would be to decide.",Yes,,Yes,,Yes,,Yes,,,I don't remember
"Experienced, I apply them occasionally.",Visual Studio,5,5,4,2,Yes,,Yes,,Yes,,Yes,,Yes,,Yes,,,Do no apply Pull Up Method
"Experienced, I apply them occasionally.","IntelliJ, VSCode",5,3,4,3,Yes,It looks like there is an error in the image. It does not look like a refactoring as in the 'after' the functionality 1 (blue box) is no longer being called.,Yes,,Yes,Tool support to aid the developer. It would not necessarily always be used.,Yes,Tool support to aid the developer. It would not necessarily always be used.,Yes,Tool support to aid the developer. It would not necessarily always be used.,Yes,Tool support to aid the developer. It would not necessarily always be used.,,I don't remember
"A little experienced, I rarely apply them.",IntelliJ,4,3,2,4,Yes,"In very large applications it is easy to forget to change somewhere, especially if the code was not written by who will perform the refactoring.",Yes,,Yes,,Yes,,Yes,,Yes,,,Yes
"Experienced, I apply them occasionally.","NetBeans, Eclipse",5,5,5,5,Yes,"While refactoring it is possible for me to have forgotten to change other calls to the related methods, so there the IDE helps.",No,,Yes,,Yes,,Yes,,Yes,,,Yes
"Experienced, I apply them occasionally.","Eclipse, IntelliJ",5,4,5,5,Yes,Because the dev can forget to change the method call and the tool can remember the parts that can be modified with the change of the method call.,Yes,Yes. Because the developer can forget to make the change in the call inside the try and other parts of the code.,No,"I don't believe so, as in this code removing the Inlined method would break it, this forces the dev to change the method's return to the inlined code.",No,"I don't believe so, as in this code removing the Inlined method would break it, this forces the dev to change the method's return to the inlined code.",Yes,Yes. Because the dev can apply only the Extract Method and forget to return the value x for the created variable. Tooling support will remind the dev to do this.,Yes,"Because the tool will help you know in which method the code should be moved. In that case, I don't consider it a Pull Up Method. Because method n was moved to superclass, only the body of the method. I think this is another type of ref.","I don't consider the change 6 a Pull Up Method, I think that cases 3 and 4 do not need tools, because the IDE itself would give notice of compilation error.","No. Intellij only supports the application, but does not recommend it. It is also difficult to see which parts will be modified with the ref."
"A little experienced, I rarely apply them.",Sonarqube,2,2,2,2,No,,No,,Yes,,Yes,,Yes,,Yes,,,Maybe
"Experienced, I apply them occasionally.","Eclipse, IntelliJ",5,3,5,3,Yes,Yes. Since the fact that methodA() was also being called by methodB() can go through unknowingly by the developer. With a tool he can choose if he really wanted to perform the change in the call.,No,,Yes,"Yes. The suggestion to put the return in a variable, instead of calling the method, could help the developer to generate a code with a higher legibility.",Yes,"Yes. The suggestion to put the return in a variable, instead of calling the method, could help the developer to generate a code with a higher legibility.",No,,No,No.,,I don't usually do refactoring with IDE support.
"Experienced, I apply them occasionally.",IntelliJ,5,5,5,5,Yes,The tool support would be useful to suggest the substitutions for the extracted method in all the necessary code blocks.,Yes,,Yes,,Yes,,Yes,,Yes,,,The IDE does not support support but is customized to make calls to calls or exception handling in all code snippets depending on changes made to the code.
"Very experienced, I apply them frequently.","Eclipse, IntelliJ",5,5,5,4,Yes,"This is the type of example where the refactoring has an effect ""external"" to the refactored code. It requires us to update other parts of the code to keep the consistency after the refactoring, but sometimes we forget to make these updates. So having a personalized aid would be great",Yes,"Sometimes it is hard to keep a consistency in how we deal with exception code (sometimes we move the handler, other times not). So, having a tool that always helps us in taking a decision, could help us improve the consistency of the code",Yes,I think it is relevant to have this kind of support because sometimes it is hard to decide how and where we will incorporate the methods,Yes,"Of course, this is a good example where having a tool can help in taking the decision. This decision many times varies from developer to developer. So it is good to have support that adequates itself to my style.",No,"I think that as this operation can be done manually quickly, maybe having a tool doesn't help that much.",Yes,"I think so. This may be the case for a feature that I don't really miss, but if it exists, I would probably use it.",,"I cannot say to what extent she offers this kind of support. I know it is still quite limited. The problem is I am not aware of whether the IDE I use offers or not. A limitation is that IDEs have so many features / buttons, that we end up losing among so many others, no matter how good it is."
"A little experienced, I rarely apply them.",IntelliJ,3,2,4,3,Yes,,Yes,,Yes,,Yes,,Yes,,Yes,,,It does not cover all possible cases. As a developer I want to be alerted to every change in my code
"Experienced, I apply them occasionally.",IntelliJ,4,3,4,3,Yes,"It is important, since the developer might not visualize some things like some parts of the code that compose the extracted part of A and that is necessary for the functioning of B.",Yes,Bringing a verification of the statistical situation for these cases can help the developer in deciding.,Yes,"Demonstrating the situation to the developer, they could have a better vision of the situation.",Yes,The developer can better structure the code with the tool.,Yes,It is important because there are several situations in which this type of redeployment is important and the tool would help the developer to see such situations.,Yes,,,"No, since you are presenting different situations the IDE is not very effective in recognizing and demonstrating such situations to the developer."
"Very experienced, I apply them frequently.",Eclipse,5,2,3,5,Yes,,Yes,,No,,Yes,,No,,Yes,,,Yes